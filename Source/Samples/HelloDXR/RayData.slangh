#pragma once

#ifndef MAX_AABB_CNT_PERRAY
#define MAX_AABB_CNT_PERRAY 10
#endif

#ifndef AABB_CNT_MSB
#define AABB_CNT_MSB 4
#endif

#ifndef MAX_AABB_IDX_CNT
#define MAX_AABB_IDX_CNT 256
#endif

#ifndef AABB_IDX_MSB
#define AABB_IDX_MSB 8
#endif

#ifndef MAX_OIT_CNT_PERRAY
#define MAX_OIT_CNT_PERRAY 4
#endif

#ifndef MAX_DEPTH
#define MAX_DEPTH 2
#endif

#ifndef MAX_POW_TWO
#define MAX_POw_TWO 6
#endif

#ifndef MAX_GROUPSIZE_X
#define MAX_GROUPSIZE_X 1024
#endif

struct Particle{
    float3 center;
    float scale;
    float cosRot;
    float sinRot;
};

struct Range{
    uint offset;
    uint size;
};

#ifndef SPRITE_HITINFO_BIT_SIZE
#define SPRITE_HITINFO_BIT_SIZE (32 + AABB_CNT_MSB + AABB_IDX_MSB * MAX_AABB_CNT_PERRAY)
                            /* float + aabbHitCnt + aabbIdx[MAX_AABB_CNT_PERRAY] */
#endif

#ifndef SPRITE_PACKED_HITINFO_SIZE
#define SPRITE_PACKED_HITINFO_SIZE ((SPRITE_HITINFO_BIT_SIZE-1)/128+1)
#endif



uint getOrVal(uint val, uint bitStride, int offset){
    uint mask = bitStride == 32 ? 0xffffffff : ((1 << bitStride) - 1);
    return (val & mask) << offset;
}

uint NextPow2( uint Val )
{
    uint Mask = (1 << firstbithigh(Val)) - 1;
    return (Val + Mask) & ~Mask;
}


struct SpriteRayHitInfo{
    float hitT;
    uint EmitterHitBitmap[MAX_AABB_IDX_CNT / 32];
    [mutating]
    void SetHitAt(uint ID){
        if (ID < MAX_AABB_IDX_CNT){
            EmitterHitBitmap[ID / 32] |= (1 << (ID & 31));
        }
    }
    bool GetHitAt(uint ID){
        if (ID < MAX_AABB_IDX_CNT){
            return EmitterHitBitmap[ID / 32] & (1 << (ID & 31));
        }
        else{
            return true;
        }
    }
    bool IsMissRay(){
        bool result = true;
        for (uint i = 0; i < MAX_AABB_IDX_CNT / 32; ++i){
            result &= (EmitterHitBitmap[i] == 0);
        }
        return result;
    }
};



float4 proceduralTexture(Texture2D texture, SamplerState sampler, float2 UV){
    return texture.SampleLevel(sampler, UV, 0.0);
}

struct HitPoint{
    float2 UV;
    float hitT;
    float factor;
}

void SwapHitPoint(inout HitPoint lhs, inout HitPoint rhs){
    HitPoint tmp = rhs;
    rhs = lhs;
    lhs = tmp;
}

#ifdef _DEBUG
struct DebugInfo{
    uint nowHitCnt;
    SpriteRayHitInfo sInfo;
};
#endif

float4x4 getTranslateMat(float3 offset){
    return float4x4(float4(1, 0, 0, offset.x), float4(0, 1, 0, offset.y), float4(0, 0, 1, offset.z), float4(0, 0, 0, 1));
}

float3x3 getNewBasisMat(float3 x,float3 y, float3 z){
    return float3x3(x,y,z);
}

float3 getOrthoVector(float3 vec){
    return cross(vec,float3(0, 1, 0));
}

float3 rotateAroundZ(float3 vec,float c,float s){
    return float3(vec.x * c - vec.y * s, vec.x * s + vec.y * c, vec.z);
}

static const float kInvalidFloatUV = 114.514;

float4 getColorFromUV(Texture2D texture, SamplerState sampler, HitPoint HP, float4 mergeColor){
    float4 retColor;
    if(HP.UV.x == kInvalidFloatUV){
        retColor = mergeColor;
    }
    else{
        float4 tmp = proceduralTexture(texture, sampler, HP.UV)  * HP.factor;
        retColor = float4(tmp.rgb * tmp.a, 1 - tmp.a);
    }
    return retColor;
}

float3 dealWithSpriteAndBlend(float3 vDir, RayDesc ray, SpriteRayHitInfo rayData, float3 color, Texture2D texture,
    SamplerState sampler, StructuredBuffer<Particle> particlePool,
    StructuredBuffer<Range> particleSystemRanges,uint threadID = 0 /* for debug */){

    uint NumEmitters = 0;
    uint StructStride = 0;
    particleSystemRanges.GetDimensions(NumEmitters, StructStride);
    if (rayData.IsMissRay() && NumEmitters <= MAX_AABB_IDX_CNT){
        //early return
        return color;
    }

    HitPoint arrayHitT[MAX_OIT_CNT_PERRAY + 1];

    float4 mergeColor = float4(0,0,0,1);

    float tMax = rayData.hitT == -1 ?  100000 : rayData.hitT;

    for (uint i = 0; i < MAX_OIT_CNT_PERRAY + 1; ++i){
        arrayHitT[i].hitT = tMax;
        arrayHitT[i].UV = float2(kInvalidFloatUV);
        arrayHitT[i].factor = 1.0;
    }

    uint nowMaxIdx = 0;

    float3 viewDir = vDir;

    float3 right = normalize(getOrthoVector(viewDir));

    float3 up = cross(viewDir,right);

    float3x3 rotWorld2View = getNewBasisMat(right,up,viewDir);

    for (uint gIdx = 0; gIdx < NumEmitters; ++gIdx){

        bool Lit = rayData.GetHitAt(gIdx);
        
        if (WaveActiveAllTrue(!Lit)){
            continue;
        }

        //

        float3 rayOrigW = ray.Origin;
        float3 rayDirW = ray.Direction;

        Range range = particleSystemRanges[gIdx];

        uint IdxEnd = range.size + range.offset;


        for (uint particle_ID = range.offset; particle_ID < IdxEnd; ++particle_ID){
            Particle pd = particlePool[particle_ID];
            //float rot = pd.rotate;

            // float cosTheta = cos(rot);
            // float sinTheta = sin(rot);

            float3 center = pd.center;
            float radius = pd.scale;

            // float4x4 translateMat = getTranslateMat(-center);
            // float4x4 rotAroundZ = float4x4(float4(cosTheta, sinTheta,0,0), float4(-sinTheta, cosTheta, 0, 0), float4(0, 0, 1, 0), float4(0, 0, 0, 1));
            // float4x4 worldToSpriteLocalMat = mul(rotAroundZ, mul(float4x4(float4(rotWorld2View[0],0),float4(rotWorld2View[1],0),float4(rotWorld2View[2],0),float4(0,0,0,1)), translateMat));

            float3 rotRayDir = rotateAroundZ(mul(rotWorld2View ,rayDirW), pd.cosRot, pd.sinRot);
            float3 rotRayOrig = rotateAroundZ(mul(rotWorld2View ,rayOrigW - center), pd.cosRot, pd.sinRot);
            // float4 rotRayDir = mul(worldToSpriteLocalMat ,float4(rayDirW,0));
            // float4 rotRayOrig = mul(worldToSpriteLocalMat ,float4(rayOrigW,1));

            float nowHitT = 0.0;
            float2 UV = float2(0.5,0.5);
            bool Lit2 = false;

            if (abs(rotRayDir.z) > 1e-3){
                nowHitT = - rotRayOrig.z / rotRayDir.z;
            }
            else{
                nowHitT = tMax - 0.01;
            }
            
            float2 nowHitP = (rotRayOrig + nowHitT * rotRayDir).xy;

            UV = nowHitP / float2(radius);
            Lit2 = nowHitT >= ray.TMin && nowHitT < tMax && all(abs(UV) < float2(1.0));
            UV = saturate( UV * float2(0.5) + float2(0.5) );

            if(WaveActiveAllTrue(!Lit2)){
                continue;
            }

            HitPoint lastVal;
            lastVal.UV = UV;
            lastVal.hitT = nowHitT;
            lastVal.factor = (Lit && Lit2) ? 1.0 : 0.0;

            for (uint i = 0;i < nowMaxIdx + 1; ++i){
                if (arrayHitT[i].hitT > nowHitT){
                    SwapHitPoint(arrayHitT[i], lastVal);
                }
                else{
                    SwapHitPoint(arrayHitT[i], arrayHitT[i]);
                }
            }

            if (nowMaxIdx == MAX_OIT_CNT_PERRAY){
                HitPoint merge;
                float4 nColor = getColorFromUV(texture, sampler, arrayHitT[MAX_OIT_CNT_PERRAY - 1], mergeColor);
                float4 nPlusOneColor = getColorFromUV(texture, sampler, arrayHitT[MAX_OIT_CNT_PERRAY], mergeColor);
                mergeColor.rgb = nColor.rgb + nPlusOneColor.rgb * nPlusOneColor.a;
                mergeColor.a = nColor.a * nPlusOneColor.a;
                merge.hitT = arrayHitT[MAX_OIT_CNT_PERRAY - 1].hitT;
                merge.UV = float2(kInvalidFloatUV);
                merge.factor = 1.0;
                arrayHitT[MAX_OIT_CNT_PERRAY - 1] = merge;
                arrayHitT[MAX_OIT_CNT_PERRAY].hitT = tMax;
            }
            else{
                ++nowMaxIdx;
            } 
        }
    }
    for (uint i = 0;i < nowMaxIdx; ++i){
        uint idx = nowMaxIdx - i - 1;
        float4 srcColor = getColorFromUV(texture, sampler, arrayHitT[idx], mergeColor);
        color = srcColor.rgb + (color * srcColor.a);
    }
#ifdef _DEBUG
    DebugInfo dbinfo = {
        nowMaxIdx,
        rayData,
        // rayData.aabbHitCnt,
    };
    dBuffer[threadID] = dbinfo;
#endif
    return color;
}